(()=>{const e=document.querySelector(".weatherCity"),t=document.querySelector(".weatherDate"),n=document.querySelector(".weatherSky"),o=(document.querySelector(".weatherSkyIcon"),document.querySelector(".weatherTemperature")),r=document.querySelector(".changeMeasurement"),c=(document.querySelector(".weatherTemperatureComment"),document.querySelector(".feelsLike")),a=document.querySelector(".humidity"),i=document.getElementById("skyIconImg");let s="London";async function l(){try{const l=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${s}&APPID=6853e2c4b792944c151fb43fba9d74ed`),u=await l.json(),d=await fetch(`https://api.ipgeolocation.io/timezone?apiKey=c542baa7031b4fbaadacd8dce5c909a9&lat=${function(e){return e.coord.lat}(u)}&long=${function(e){return e.coord.lon}(u)}`),h=await d.json();console.log(u),e.textContent=`${u.name}`,o.textContent=`${y(u).toFixed(0)} °F`,c.textContent=`${m(u).toFixed(0)} °F`,a.textContent=`${u.main.humidity} %`,n.textContent=`${u.weather[0].main}`,r.addEventListener("click",(()=>{"Display °C"===r.textContent?(r.textContent="Display °F",o.textContent=`${function(e){return e.main.temp-273.15}(u).toFixed(0)} °F`,c.textContent=`${function(e){return e.main.feels_like-273.15}(u).toFixed(0)} °F`):"Display °F"===r.textContent&&(r.textContent="Display °C",o.textContent=`${y(u).toFixed(0)} °C`,c.textContent=`${m(u).toFixed(0)} °F`)}));let g=new Date;t.textContent=g.toLocaleString("en-US",{timeZone:`${h.timezone}`});let p=u.dt,x=u.sys.sunrise,C=u.sys.sunset;console.log(p),console.log(x),console.log(C),"Rain"===u.weather[0].main?i.src="/src/rain.svg":"Clouds"===u.weather[0].main?i.src="/src/cloud.svg":"Snow"===u.weather[0].main?i.src="/src/snow.svg":p>C||p<x?i.src="/src/moon.svg":(p>x||p<x)&&(i.src="/src/sun.svg")}catch(e){alert("Error: Invalid city, try spacing words. Example: Los Angeles")}}l();const u=document.querySelector(".magnify"),d=document.querySelector(".searchCityInput");function m(e){return 1.8*(e.main.feels_like-273)+32}function y(e){return 1.8*(e.main.temp-273)+32}u.addEventListener("click",(()=>{o.style.opacity="0",s=d.value,l(),o.style.opacity="1"})),o.addEventListener("change",(()=>{alert("change")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,